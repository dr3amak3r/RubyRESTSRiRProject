!RBIX
1888072837431792274
0
M
1
n
n
x
E
8
US-ASCII
10
__script__
i
391
48
0
92
48
1
92
48
2
92
48
3
92
48
4
92
48
5
92
48
6
92
48
7
92
48
8
92
48
9
92
48
10
92
48
11
92
48
12
92
48
13
92
48
14
92
48
15
92
48
16
92
48
17
92
48
18
92
48
19
92
48
20
92
48
21
92
48
22
92
48
23
92
48
24
92
48
25
92
48
26
92
48
27
92
48
28
92
48
29
92
48
30
92
48
31
92
48
32
92
48
33
92
48
34
92
48
35
92
48
36
92
48
37
92
48
38
92
48
39
92
48
40
92
48
41
92
48
42
92
48
43
92
48
44
92
48
45
92
48
46
92
48
47
92
48
48
92
48
49
92
48
50
92
48
51
92
48
52
92
48
53
92
48
54
92
48
55
92
48
56
92
48
57
92
48
58
92
48
59
92
48
60
92
48
61
92
48
62
92
48
63
92
48
64
92
48
65
92
48
66
92
48
67
92
48
68
92
48
69
92
48
70
92
48
71
92
48
72
92
48
73
92
48
74
92
48
75
92
48
76
92
48
77
92
48
78
92
48
79
92
48
80
92
48
81
92
48
82
92
48
83
92
48
84
92
48
85
92
48
86
92
48
87
92
48
88
92
48
89
92
48
90
92
48
91
92
48
92
92
48
93
92
48
94
92
48
95
92
48
96
92
48
97
92
48
98
92
48
99
92
48
100
92
48
101
92
48
102
92
48
103
92
48
104
92
48
105
92
48
106
92
48
107
92
48
108
92
48
109
92
48
110
92
48
111
92
48
112
92
48
113
92
48
114
92
48
115
92
48
116
92
48
117
92
48
118
92
48
119
92
48
120
92
29
121
84
0
35
57
48
121
48
122
58
64
73
123
74
124
4
35
59
49
0
1
74
121
1
35
61
70
I
7a
I
1
I
0
I
0
I
0
n
n
I
0
p
125
s
E
5
UTF-8
5
scope
s
E
5
UTF-8
5
block
s
E
5
UTF-8
2
if
s
E
5
UTF-8
4
case
s
E
5
UTF-8
4
when
s
E
5
UTF-8
5
opt_n
s
E
5
UTF-8
5
while
s
E
5
UTF-8
5
until
s
E
5
UTF-8
4
iter
s
E
5
UTF-8
3
for
s
E
5
UTF-8
5
break
s
E
5
UTF-8
4
next
s
E
5
UTF-8
4
redo
s
E
5
UTF-8
5
retry
s
E
5
UTF-8
5
begin
s
E
5
UTF-8
6
rescue
s
E
5
UTF-8
7
resbody
s
E
5
UTF-8
6
ensure
s
E
5
UTF-8
3
and
s
E
5
UTF-8
2
or
s
E
5
UTF-8
5
masgn
s
E
5
UTF-8
5
lasgn
s
E
5
UTF-8
5
dasgn
s
E
5
UTF-8
10
dasgn_curr
s
E
5
UTF-8
5
gasgn
s
E
5
UTF-8
5
iasgn
s
E
5
UTF-8
6
iasgn2
s
E
5
UTF-8
5
cdecl
s
E
5
UTF-8
6
cvasgn
s
E
5
UTF-8
6
cvdecl
s
E
5
UTF-8
8
op_asgn1
s
E
5
UTF-8
8
op_asgn2
s
E
5
UTF-8
11
op_asgn_and
s
E
5
UTF-8
10
op_asgn_or
s
E
5
UTF-8
8
op_cdecl
s
E
5
UTF-8
4
call
s
E
5
UTF-8
5
fcall
s
E
5
UTF-8
5
vcall
s
E
5
UTF-8
5
qcall
s
E
5
UTF-8
5
super
s
E
5
UTF-8
6
zsuper
s
E
5
UTF-8
5
array
s
E
5
UTF-8
6
zarray
s
E
5
UTF-8
6
values
s
E
5
UTF-8
4
hash
s
E
5
UTF-8
6
return
s
E
5
UTF-8
5
yield
s
E
5
UTF-8
4
lvar
s
E
5
UTF-8
4
dvar
s
E
5
UTF-8
4
gvar
s
E
5
UTF-8
4
ivar
s
E
5
UTF-8
5
const
s
E
5
UTF-8
4
cvar
s
E
5
UTF-8
7
nth_ref
s
E
5
UTF-8
8
back_ref
s
E
5
UTF-8
5
match
s
E
5
UTF-8
6
match2
s
E
5
UTF-8
6
match3
s
E
5
UTF-8
3
lit
s
E
5
UTF-8
3
str
s
E
5
UTF-8
4
dstr
s
E
5
UTF-8
4
xstr
s
E
5
UTF-8
5
dxstr
s
E
5
UTF-8
5
evstr
s
E
5
UTF-8
5
dregx
s
E
5
UTF-8
10
dregx_once
s
E
5
UTF-8
4
args
s
E
5
UTF-8
8
args_aux
s
E
5
UTF-8
7
opt_arg
s
E
5
UTF-8
6
kw_arg
s
E
5
UTF-8
7
postarg
s
E
5
UTF-8
7
argscat
s
E
5
UTF-8
8
argspush
s
E
5
UTF-8
5
splat
s
E
5
UTF-8
6
to_ary
s
E
5
UTF-8
9
block_arg
s
E
5
UTF-8
10
block_pass
s
E
5
UTF-8
4
defn
s
E
5
UTF-8
4
defs
s
E
5
UTF-8
5
defnm
s
E
5
UTF-8
5
defsm
s
E
5
UTF-8
3
fun
s
E
5
UTF-8
4
funm
s
E
5
UTF-8
5
alias
s
E
5
UTF-8
6
valias
s
E
5
UTF-8
5
undef
s
E
5
UTF-8
5
class
s
E
5
UTF-8
6
module
s
E
5
UTF-8
6
sclass
s
E
5
UTF-8
6
colon2
s
E
5
UTF-8
6
colon3
s
E
5
UTF-8
4
dot2
s
E
5
UTF-8
4
dot3
s
E
5
UTF-8
5
flip2
s
E
5
UTF-8
5
flip3
s
E
5
UTF-8
4
self
s
E
5
UTF-8
3
nil
s
E
5
UTF-8
4
true
s
E
5
UTF-8
5
false
s
E
5
UTF-8
7
errinfo
s
E
5
UTF-8
7
defined
s
E
5
UTF-8
7
postexe
s
E
5
UTF-8
6
alloca
s
E
5
UTF-8
7
bmethod
s
E
5
UTF-8
4
memo
s
E
5
UTF-8
5
ifunc
s
E
5
UTF-8
4
dsym
s
E
5
UTF-8
11
andattrasgn
s
E
5
UTF-8
8
attrasgn
s
E
5
UTF-8
7
prelude
s
E
5
UTF-8
6
lambda
s
E
5
UTF-8
8
optblock
s
E
5
UTF-8
4
last
s
E
5
UTF-8
4
file
s
E
5
UTF-8
5
regex
s
E
5
UTF-8
6
number
s
E
5
UTF-8
5
float
s
E
5
UTF-8
8
encoding
s
E
5
UTF-8
6
preexe
s
E
5
UTF-8
8
rational
s
E
5
UTF-8
9
imaginary
x
E
8
US-ASCII
16
write_node_types
M
1
n
n
x
E
8
US-ASCII
16
write_node_types
i
28
40
0
48
1
92
48
2
92
12
3
75
4
2
35
40
0
48
5
92
48
2
92
12
6
75
4
2
70
I
5
I
1
I
1
I
0
I
1
n
n
I
1
p
7
x
E
8
US-ASCII
4
File
s
E
5
UTF-8
14
node_types.cpp
s
E
5
UTF-8
2
wb
M
1
p
2
x
E
8
US-ASCII
9
for_block
t
n
x
E
8
US-ASCII
16
write_node_types
i
86
49
0
48
0
92
74
1
1
35
46
0
29
1
84
1
35
50
1
0
12
2
75
3
0
35
49
0
48
4
92
74
1
1
35
49
0
73
1
35
49
0
48
5
92
74
1
1
35
49
0
49
1
12
6
75
7
0
48
8
92
74
9
1
74
1
1
35
49
0
48
10
50
1
0
73
11
32
12
48
13
91
3
74
1
1
70
I
7
I
2
I
1
I
0
I
1
n
n
I
1
p
14
s
E
5
UTF-8
190
/* This file is generated by node_types.rb. Do not edit. */

#include "namespace.h"
#include "node_types.hpp"

#include <stdio.h>

namespace MELBOURNE {
  static const char node_types[] = {

x
E
8
US-ASCII
4
puts
M
1
p
2
x
E
8
US-ASCII
9
for_block
t
n
x
E
8
US-ASCII
16
write_node_types
i
41
50
1
0
48
0
49
0
32
1
48
2
91
3
74
3
1
35
50
1
1
50
1
1
73
4
49
0
73
5
74
6
1
46
1
74
6
1
74
7
1
70
I
6
I
1
I
1
I
0
I
1
n
n
I
1
p
8
s
E
5
UTF-8
5
    "
x
E
8
US-ASCII
4
to_s
s
E
5
UTF-8
3
\0"
x
E
8
US-ASCII
4
puts
x
E
8
US-ASCII
4
last
x
E
8
US-ASCII
4
size
x
E
8
US-ASCII
1
+
x
E
8
US-ASCII
4
push
p
7
I
-1
I
8c
I
0
I
8d
I
11
I
8e
I
29
x
E
8
US-ASCII
156
/home/travis/build/rubinius/rubinius-build/rubinius-3.79/staging/rubinius/3.79/runtime/gems/rubinius-melbourne-3.9/ext/rubinius/code/melbourne/node_types.rb
p
1
x
E
8
US-ASCII
4
type
x
E
8
US-ASCII
4
each
s
E
5
UTF-8
4
  };
s
E
5
UTF-8
54
  static const unsigned short node_types_offsets[] = {
M
1
p
2
x
E
8
US-ASCII
9
for_block
t
n
x
E
8
US-ASCII
16
write_node_types
i
9
48
0
49
0
32
1
91
2
70
I
4
I
1
I
1
I
0
I
1
n
n
I
1
p
2
s
E
5
UTF-8
4
    
x
E
8
US-ASCII
4
to_s
p
3
I
-1
I
96
I
9
x
E
8
US-ASCII
156
/home/travis/build/rubinius/rubinius-build/rubinius-3.79/staging/rubinius/3.79/runtime/gems/rubinius-melbourne-3.9/ext/rubinius/code/melbourne/node_types.rb
p
1
x
E
8
US-ASCII
1
i
x
E
8
US-ASCII
3
map
s
E
5
UTF-8
2
,

x
E
8
US-ASCII
4
join
s
E
5
UTF-8
78
  };

  const char *get_node_type_string(enum node_type node) {
    if(node < 
x
E
8
US-ASCII
4
size
x
E
8
US-ASCII
4
to_s
s
E
5
UTF-8
260
) {
      return node_types + node_types_offsets[node];
    } else {
#define NODE_STRING_MESSAGE_LEN 20
      static char msg[NODE_STRING_MESSAGE_LEN];
      snprintf(msg, NODE_STRING_MESSAGE_LEN, "unknown node type: %d", node);
      return msg;
    }
  }
};

p
23
I
-1
I
7e
I
0
I
7f
I
9
I
8b
I
10
I
8c
I
19
I
91
I
22
I
92
I
27
I
94
I
30
I
96
I
43
I
98
I
45
I
9c
I
52
I
98
I
56
x
E
8
US-ASCII
156
/home/travis/build/rubinius/rubinius-build/rubinius-3.79/staging/rubinius/3.79/runtime/gems/rubinius-melbourne-3.9/ext/rubinius/code/melbourne/node_types.rb
p
2
x
E
8
US-ASCII
1
f
x
E
8
US-ASCII
7
indexes
x
E
8
US-ASCII
4
open
s
E
5
UTF-8
14
node_types.hpp
M
1
p
2
x
E
8
US-ASCII
9
for_block
t
n
x
E
8
US-ASCII
16
write_node_types
i
38
49
0
48
0
92
74
1
1
35
49
0
50
1
0
12
2
75
3
0
48
4
92
74
5
1
74
1
1
35
49
0
48
6
92
74
1
1
70
I
5
I
1
I
1
I
0
I
1
n
n
I
1
p
7
s
E
5
UTF-8
156
#ifndef MEL_NODE_TYPES_HPP
#define MEL_NODE_TYPES_HPP
/* This file is generated by node_types.rb. Do not edit. */

namespace MELBOURNE {
  enum node_type {

x
E
8
US-ASCII
4
puts
M
1
p
2
x
E
8
US-ASCII
9
for_block
t
n
x
E
8
US-ASCII
16
write_node_types
i
11
48
0
49
0
73
1
32
2
91
2
70
I
4
I
1
I
1
I
0
I
1
n
n
I
1
p
3
s
E
5
UTF-8
9
    NODE_
x
E
8
US-ASCII
6
upcase
x
E
8
US-ASCII
4
to_s
p
3
I
-1
I
b3
I
b
x
E
8
US-ASCII
156
/home/travis/build/rubinius/rubinius-build/rubinius-3.79/staging/rubinius/3.79/runtime/gems/rubinius-melbourne-3.9/ext/rubinius/code/melbourne/node_types.rb
p
1
x
E
8
US-ASCII
1
x
x
E
8
US-ASCII
3
map
s
E
5
UTF-8
2
,

x
E
8
US-ASCII
4
join
s
E
5
UTF-8
73
  };

  const char *get_node_type_string(enum node_type nt);

};

#endif

p
9
I
-1
I
a9
I
0
I
aa
I
9
I
b3
I
1d
I
b5
I
26
x
E
8
US-ASCII
156
/home/travis/build/rubinius/rubinius-build/rubinius-3.79/staging/rubinius/3.79/runtime/gems/rubinius-melbourne-3.9/ext/rubinius/code/melbourne/node_types.rb
p
1
x
E
8
US-ASCII
1
f
p
7
I
-1
I
7d
I
0
I
7e
I
e
I
a9
I
1c
x
E
8
US-ASCII
156
/home/travis/build/rubinius/rubinius-build/rubinius-3.79/staging/rubinius/3.79/runtime/gems/rubinius-melbourne-3.9/ext/rubinius/code/melbourne/node_types.rb
p
1
x
E
8
US-ASCII
4
list
x
E
8
US-ASCII
17
method_visibility
x
E
8
US-ASCII
15
add_defn_method
p
249
I
0
I
2
I
3
I
3
I
6
I
4
I
9
I
5
I
c
I
6
I
f
I
7
I
12
I
8
I
15
I
9
I
18
I
a
I
1b
I
b
I
1e
I
c
I
21
I
d
I
24
I
e
I
27
I
f
I
2a
I
10
I
2d
I
11
I
30
I
12
I
33
I
13
I
36
I
14
I
39
I
15
I
3c
I
16
I
3f
I
17
I
42
I
18
I
45
I
19
I
48
I
1a
I
4b
I
1b
I
4e
I
1c
I
51
I
1d
I
54
I
1e
I
57
I
1f
I
5a
I
20
I
5d
I
21
I
60
I
22
I
63
I
23
I
66
I
24
I
69
I
25
I
6c
I
26
I
6f
I
27
I
72
I
28
I
75
I
29
I
78
I
2a
I
7b
I
2b
I
7e
I
2c
I
81
I
2d
I
84
I
2e
I
87
I
2f
I
8a
I
30
I
8d
I
31
I
90
I
32
I
93
I
33
I
96
I
34
I
99
I
35
I
9c
I
36
I
9f
I
37
I
a2
I
38
I
a5
I
39
I
a8
I
3a
I
ab
I
3b
I
ae
I
3c
I
b1
I
3d
I
b4
I
3e
I
b7
I
3f
I
ba
I
40
I
bd
I
41
I
c0
I
42
I
c3
I
43
I
c6
I
44
I
c9
I
45
I
cc
I
46
I
cf
I
47
I
d2
I
48
I
d5
I
49
I
d8
I
4a
I
db
I
4b
I
de
I
4c
I
e1
I
4d
I
e4
I
4e
I
e7
I
4f
I
ea
I
50
I
ed
I
51
I
f0
I
52
I
f3
I
53
I
f6
I
54
I
f9
I
55
I
fc
I
56
I
ff
I
57
I
102
I
58
I
105
I
59
I
108
I
5a
I
10b
I
5b
I
10e
I
5c
I
111
I
5d
I
114
I
5e
I
117
I
5f
I
11a
I
60
I
11d
I
61
I
120
I
62
I
123
I
63
I
126
I
64
I
129
I
65
I
12c
I
66
I
12f
I
67
I
132
I
68
I
135
I
69
I
138
I
6a
I
13b
I
6b
I
13e
I
6c
I
141
I
6d
I
144
I
6e
I
147
I
6f
I
14a
I
70
I
14d
I
71
I
150
I
72
I
153
I
73
I
156
I
74
I
159
I
75
I
15c
I
76
I
15f
I
77
I
162
I
78
I
165
I
79
I
168
I
7a
I
16d
I
1
I
170
I
7d
I
17d
I
c1
I
187
x
E
8
US-ASCII
156
/home/travis/build/rubinius/rubinius-build/rubinius-3.79/staging/rubinius/3.79/runtime/gems/rubinius-melbourne-3.9/ext/rubinius/code/melbourne/node_types.rb
p
1
x
E
8
US-ASCII
10
node_types
